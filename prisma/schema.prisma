generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @unique @default(cuid())
  googleId String? @unique

  email    String  @unique @db.VarChar(255)
  password String? @db.VarChar(255)

  emailVerificationId String?            @unique
  emailVerifcation    EmailVerification? @relation(fields: [emailVerificationId], references: [id])

  createdAt          DateTime             @default(now())
  name               String?              @db.VarChar(255)
  photoURL           String?              @db.VarChar(255)
  country            String?              @db.VarChar(100)
  city               String?              @db.VarChar(100)
  phoneNumber        String?              @db.VarChar(100)
  updatedAt          DateTime             @updatedAt
  status             Status               @default(pending)
  eventId            String?
  role               RoleEnum
  photoBackgroundURL String?              @db.VarChar(255)
  updateRefershToken DateTime?
  xeroRefreshToken   String?
  admin              Admin?
  client             Client?
  agreementTemplate  AgreementTemplate[]
  Board              Board?
  BookMarkCampaign   BookMarkCampaign[]
  campaignLogs       CampaignLog[]
  CampaignTaskAdmin  CampaignTaskAdmin[]
  creator            Creator?
  creatorAgreement   CreatorAgreement[]
  feedback           Feedback[]
  finance            Finance?
  invoice            Invoice[]            @relation("CreatedBy")
  logistic           Logistic[]
  sentMessages       Message[]            @relation("UserMessages")
  notifications      Notification[]
  paymentForm        PaymentForm?
  pitch              Pitch[]
  resetPasswordToken ResetPasswordToken?
  seenMessages       SeenMessage[]
  shortlisted        ShortListedCreator[]
  submission         Submission[]
  taskAssignee       TaskAssignee[]
  unreadMessages     UnreadMessage[]
  event              Event?               @relation(fields: [eventId], references: [id])
  userNotification   UserNotification[]
  UserThread         UserThread[]
  threads            Thread[]             @relation("UserThreads")
  bugs               Bugs[]
  video              Video[]
  rawFootage         RawFootage[]
  photo              Photo[]
  isActive           Boolean              @default(true)
  isVerified         Boolean              @default(false)
  isKWSPCampaign     Boolean?             @default(false)
  hasSubmittedKWSP   Boolean              @default(false)
  
  // Individual feedback relations
  videoFeedback      Video[]              @relation("VideoFeedback")
  rawFootageFeedback RawFootage[]         @relation("RawFootageFeedback")
  photoFeedback      Photo[]              @relation("PhotoFeedback")
}

model EmailVerification {
  id        String   @id @unique @default(cuid())
  shortCode String
  token     String
  expiredAt DateTime
  user      User?
}

model ResetPasswordToken {
  id        String   @id @unique @default(cuid())
  token     String?
  userId    String?  @unique
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model Admin {
  id          String  @id @unique @default(cuid())
  mode        Mode    @default(normal)
  inviteToken String? @unique
  userId      String  @unique
  roleId      String?

  xeroTokenSet Json?

  role Role? @relation(fields: [roleId], references: [id])
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  client Client?

  adminPermissionModule AdminPermissionModule[]
  campaignAdmin         CampaignAdmin[]
  adminLogs             AdminLog[]              @relation("AdminToAdminLog")
  approvedPitches       Pitch[]                 @relation("ApprovedByAdmin")
  approvedSubmissions   Submission[]            @relation("ApprovedByAdmin")
  completedAgreements   CreatorAgreement[]      @relation("CompletedByAdmin")
}

model Client {
  id     String @id @unique @default(cuid())
  //  companyName String   @db.VarChar(255)
  //  address     String?  @db.VarChar(255)
  //  phone       String?  @db.VarChar(100)
  //  website     String?  @db.VarChar(255)
  inviteToken String? @unique
  companyId String?
  userId String @unique
  adminId String? @unique
  company Company? @relation(fields: [companyId], references: [id])
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  admin  Admin? @relation(fields: [adminId], references: [id])
}

model Role {
  id          String       @id @unique @default(cuid())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  admin       Admin[]
  permissions Permisions[] @relation("RolePermission")
}

model Permisions {
  id           String   @id @unique @default(cuid())
  name         String   @unique
  descriptions String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  role         Role[]   @relation("RolePermission")
}

model Creator {
  id                     String      @id @unique @default(cuid())
  pronounce              String?     @db.VarChar(100)
  address                String?
  state                  String?
  location               String?
  birthDate              DateTime?
  instagram              String?     @db.VarChar(100)
  tiktok                 String?     @db.VarChar(100)
  employment             Employment? @default(others)
  languages              Json?
  userId                 String      @unique
  socialMediaData        Json?
  isFormCompleted        Boolean?
  socialMediaUpdateCount Json?
  allowToChange          Boolean     @default(false)
  industries             Json?
  xeroContactId          String?
  user                   User        @relation(fields: [userId], references: [id])
  interests              Interest[]
  invoices               Invoice[]
  mediaKit               MediaKit?
  isTiktokConnected      Boolean     @default(false)
  isFacebookConnected    Boolean     @default(false)
  tiktokData             Json?
  instagramData          Json?

  isOnBoardingFormCompleted Boolean?

  tiktokUser    TiktokUser?
  instagramUser InstagramUser?
}

model TiktokUser {
  id String @id @unique @default(cuid())

  creatorId String  @unique
  creator   Creator @relation(references: [id], fields: [creatorId])

  display_name String?
  avatar_url   String?

  following_count Int?
  follower_count  Int?
  likes_count     Int?
  
  totalLikes      Int?
  totalComments   Int?
  averageLikes    Float?
  averageComments Float?
  engagement_rate Float?
  lastUpdated     DateTime?

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  tiktokVideo TiktokVideo[]
}

model TiktokVideo {
  id              String  @id @unique @default(cuid())
  video_id        String? @unique
  cover_image_url String?
  title           String?
  description     String?
  duration        Float?
  embed_link      String?
  embed_html      String?

  like_count    Int?
  comment_count Int?
  share_count   Int?
  view_count    Int?

  tiktokUserId String?
  tiktokUser   TiktokUser? @relation(references: [id], fields: [tiktokUserId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InstagramUser {
  id String @id @unique @default(cuid())

  creatorId String  @unique
  creator   Creator @relation(references: [id], fields: [creatorId])

  accessToken     Json?
  expiresIn       Int?
  user_id         String? @unique
  followers_count Int?
  follows_count   Int?
  media_count     Int?
  username        String?
  totalLikes      Int?
  totalComments   Int?
  averageLikes    Float?
  averageComments Float?
  engagement_rate Float?
  lastUpdated DateTime?

  instagramVideo InstagramVideo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InstagramVideo {
  id String @id @unique @default(cuid())

  video_id String? @unique

  comments_count Int?
  like_count     Int?
  media_type     String?
  media_url      String?
  thumbnail_url  String?
  caption        String?
  permalink      String?
  shortCode      String?
  datePosted     DateTime?

  instagramUserId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  instagramUser InstagramUser? @relation(fields: [instagramUserId], references: [id])
}

model MediaKit {
  id          String  @id @unique @default(cuid())
  displayName String?

  about String?

  creatorId String  @unique
  creator   Creator @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

model Message {
  id             Int             @id @default(autoincrement())
  content        String
  createdAt      DateTime        @default(now())
  threadId       String?
  senderId       String?
  file           String?
  fileType       String?
  sender         User?           @relation("UserMessages", fields: [senderId], references: [id])
  thread         Thread?         @relation(fields: [threadId], references: [id])
  seenMessages   SeenMessage[]
  threadLatest   Thread?         @relation("LatestMessage")
  unreadMessages UnreadMessage[]
}

model UnreadMessage {
  id        Int     @id @default(autoincrement())
  userId    String
  threadId  String
  messageId Int
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  thread    Thread  @relation(fields: [threadId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, threadId, messageId])
}

model SeenMessage {
  id        Int     @id @default(autoincrement())
  userId    String
  messageId Int
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, messageId])
}

model Thread {
  id              String          @id @unique @default(cuid())
  title           String
  description     String
  photoURL        String?         @db.VarChar(255)
  isGroup         Boolean         @default(true)
  campaignId      String?         @unique
  latestMessageId Int?            @unique
  messages        Message[]
  campaign        Campaign?       @relation(fields: [campaignId], references: [id])
  latestMessage   Message?        @relation("LatestMessage", fields: [latestMessageId], references: [id])
  unreadMessages  UnreadMessage[]
  UserThread      UserThread[]
  users           User[]          @relation("UserThreads")
}

model UserThread {
  userId   String
  threadId String
  archived Boolean @default(false)
  thread   Thread  @relation(fields: [threadId], references: [id])
  user     User    @relation(fields: [userId], references: [id])

  @@id([userId, threadId])
}

model Interest {
  id      String  @id @unique @default(cuid())
  name    String?
  rank    Int?
  userId  String
  creator Creator @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Finance {
  id     String @id @unique @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Event {
  id          String     @id @unique @default(cuid())
  title       String?
  description String?
  color       String?
  allDay      Boolean
  userId      String
  start       DateTime
  end         DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Campaign    Campaign[]
  user        User[]
}

// model session {
//   sid    String   @id @unique @default(cuid())
//   sess   Json
//   expire DateTime
// }

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Company {
  // id                  String         @id @unique @default(cuid())
  id                  String       @id @unique @default(cuid())
  name                String
  email               String?
  // clientId            String?        @unique @default(cuid())
  clientId            String?      @unique @default(cuid())
  type                CompanyType?
  phone               String?
  website             String?
  address             String?
  logo                String?
  about               String?
  objectives          Json?
  registration_number String?      @db.VarChar(150)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  brand         Brand[]
  campaign      Campaign[]
  pic           Pic[]
  subscriptions Subscription[]
  clients       Client[]

  @@index([clientId])
}

enum CompanyType {
  agency
  directClient
}

model Pic {
  id          String   @id @unique @default(cuid())
  name        String
  email       String?
  designation String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company? @relation(fields: [companyId], references: [id])
  companyId   String?
  brand       Brand?   @relation(fields: [brandId], references: [id])
  brandId     String?
}

model Brand {
  id           String     @id @unique @default(cuid())
  name         String     @db.VarChar(100)
  email        String?    @db.VarChar(255)
  phone        String?    @db.VarChar(255)
  website      String?    @db.VarChar(255)
  logo         String?    @db.VarChar(255)
  description  String?    @db.VarChar(255)
  service_name String?    @db.VarChar(255)
  instagram    String?    @db.VarChar(255)
  tiktok       String?    @db.VarChar(255)
  facebook     String?    @db.VarChar(255)
  objectives   Json?
  industries   Json?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  companyId    String
  company      Company    @relation(fields: [companyId], references: [id])
  campaign     Campaign[]
  supBrand     SupBrand[]
  pic          Pic[]
}

model SupBrand {
  id                  String        @id @unique @default(cuid())
  name                String        @db.VarChar(255)
  email               String?       @db.VarChar(255)
  phone               String?       @db.VarChar(255)
  tiktok              String?       @db.VarChar(255)
  instagram           String?       @db.VarChar(255)
  website             String?       @db.VarChar(255)
  logo                String?       @db.VarChar(255)
  registration_number String        @unique
  description         String?       @db.VarChar(255)
  service_name        String?       @db.VarChar(255)
  facebook            String?       @db.VarChar(255)
  intersets           Json?
  industries          Json?
  objectives          Json?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  brandId             String
  brand               Brand         @relation(fields: [brandId], references: [id])
  supSupBrand         SupSupBrand[]
}

model SupSupBrand {
  id                  String   @id @unique @default(cuid())
  name                String   @db.VarChar(255)
  email               String?  @db.VarChar(255)
  phone               String?  @db.VarChar(255)
  tiktok              String?  @db.VarChar(255)
  instagram           String?  @db.VarChar(255)
  facebook            String?  @db.VarChar(255)
  website             String?  @db.VarChar(255)
  service_name        String?  @db.VarChar(255)
  registration_number String   @unique
  logo                String?  @db.VarChar(255)
  description         String?  @db.VarChar(255)
  objectives          Json?
  intersets           Json?
  industries          Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  supBrandId          String
  supBrand            SupBrand @relation(fields: [supBrandId], references: [id])
}

model Campaign {
  id              String         @id @unique @default(cuid())
  campaignId      String?
  name            String
  description     String
  status          CampaignStatus @default(SCHEDULED)
  campaignCredits Int?
  creditsPending  Int?
  creditsUtilized Int?

  brandId        String?
  subscriptionId String?

  companyId           String?
  brandTone           String?
  productName         String?
  eventId             String?
  agreementTemplateId String?
  spreadSheetURL      String?
  campaignType        String?            @default("normal")
  bookMarkCampaign    BookMarkCampaign[]
  agreementTemplate   AgreementTemplate? @relation(fields: [agreementTemplateId], references: [id])
  brand               Brand?             @relation(fields: [brandId], references: [id])
  company             Company?           @relation(fields: [companyId], references: [id])
  event               Event?             @relation(fields: [eventId], references: [id])
  subscription        Subscription?      @relation(fields: [subscriptionId], references: [id])

  campaignAdmin                 CampaignAdmin[]
  campaignBrief                 CampaignBrief?
  campaignLogs                  CampaignLog[]
  campaignRequirement           CampaignRequirement?
  campaignSubmissionRequirement CampaignSubmissionRequirement[]
  campaignTasks                 CampaignTask[]
  campaignTimeline              CampaignTimeline[]
  creatorAgreement              CreatorAgreement[]
  invoice                       Invoice[]
  logistic                      Logistic[]
  notifications                 Notification[]
  pitch                         Pitch[]
  shortlisted                   ShortListedCreator[]
  submission                    Submission[]
  thread                        Thread?
  publicAccess                  PublicAccess[]

  rawFootage   Boolean @default(false)
  photos       Boolean @default(false)
  ads          Boolean @default(false)
  crossPosting Boolean @default(false)

  rawFootages RawFootage[]
  photosData  Photo[]
  video       Video[]

  isKWSPCampaign Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BookMarkCampaign {
  id         String   @id @unique @default(cuid())
  userId     String
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, campaignId])
}

model CampaignAdmin {
  adminId    String
  campaignId String
  admin      Admin    @relation(fields: [adminId], references: [userId], onDelete: Cascade)
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@id([adminId, campaignId])
  @@index([adminId])
  @@index([campaignId])
}

model CampaignRequirement {
  id              String   @id @unique @default(cuid())
  gender          String[]
  age             String[]
  geoLocation     String[]
  language        String[]
  creator_persona String[]
  user_persona    String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  campaignId      String   @unique
  campaign        Campaign @relation(fields: [campaignId], references: [id])
}

model CampaignBrief {
  id                  String   @id @unique @default(cuid())
  title               String
  objectives          String?
  images              Json?
  agreementFrom       String?
  startDate           DateTime
  endDate             DateTime
  interests           Json?
  industries          String?
  success             String?
  socialMediaPlatform String[]
  videoAngle          String[]
  campaigns_do        Json?
  campaigns_dont      Json?
  updatedAt           DateTime @updatedAt
  createdAt           DateTime @default(now())
  campaignId          String   @unique
  otherAttachments    String[]
  referencesLinks     String[]
  campaign            Campaign @relation(fields: [campaignId], references: [id])
}

model Permission {
  id                    String                  @id @unique @default(cuid())
  description           String?
  name                  String
  adminPermissionModule AdminPermissionModule[]
}

model Module {
  id                    String                  @id @unique @default(cuid())
  name                  Modules
  description           String?
  adminPermissionModule AdminPermissionModule[]
}

model AdminPermissionModule {
  id           String     @id @unique @default(cuid())
  adminId      String
  moduleId     String
  permissionId String
  admin        Admin      @relation(fields: [adminId], references: [id])
  module       Module     @relation(fields: [moduleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
}

model TimelineDefault {
  id                    String              @id @unique @default(cuid())
  timelineTypeDefaultId String              @unique
  for                   String?
  duration              Int
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  order                 Int
  timelineType          TimelineTypeDefault @relation(fields: [timelineTypeDefaultId], references: [id])
}

model TimelineTypeDefault {
  id              String           @id @unique @default(cuid())
  name            String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  timelineDefault TimelineDefault?
}

model CampaignTimeline {
  id               String          @id @unique @default(cuid())
  name             String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  for              String?
  description      String?
  duration         Int
  startDate        DateTime
  endDate          DateTime
  campaignId       String
  order            Int
  status           TimelineStatus  @default(OPEN)
  submissionTypeId String?
  campaignTasks    CampaignTask[]
  campaign         Campaign        @relation(fields: [campaignId], references: [id])
  submissionType   SubmissionType? @relation(fields: [submissionTypeId], references: [id])
}

model CampaignLog {
  id         String   @id @unique @default(cuid())
  createdAt  DateTime @default(now())
  message    String
  campaignId String
  adminId    String
  admin      User     @relation(fields: [adminId], references: [id])
  campaign   Campaign @relation(fields: [campaignId], references: [id])
}

model AdminLog {
  id          String   @id @unique @default(cuid())
  createdAt   DateTime @default(now())
  message     String
  performedBy String?
  adminId     String? // Nullable for past actions
  admin       Admin?   @relation("AdminToAdminLog", fields: [adminId], references: [userId], onDelete: Cascade)
}

model Pitch {
  id                String         @id @unique @default(cuid())
  type              PitchType
  campaignId        String
  userId            String
  status            PitchStatus?   @default(pending)
  content           String         @default("test")
  createdAt         DateTime       @default(now())
  completedAt       DateTime?
  approvedByAdminId String?
  Notification      Notification[]
  campaign          Campaign       @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user              User           @relation(fields: [userId], references: [id])
  admin             Admin?         @relation(fields: [approvedByAdminId], references: [userId], name: "ApprovedByAdmin")

  @@unique([userId, campaignId])
}

model ShortListedCreator {
  id               String   @id @default(cuid())
  campaignId       String
  userId           String?
  currency         String?
  shortlisted_date DateTime @default(now())
  isAgreementReady Boolean? @default(false)
  isCampaignDone   Boolean? @default(false)
  isCreatorPaid    Boolean? @default(false)
  ugcVideos        Int?
  amount           Int?
  campaign         Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user             User?    @relation(fields: [userId], references: [id])

  @@unique([userId, campaignId])
  @@index([userId])
}

model CampaignTask {
  id                 String              @id @unique @default(cuid())
  task               String?
  campaignTimelineId String
  campaignId         String
  status             TaskStatus          @default(NOT_STARTED)
  createdAt          DateTime            @default(now())
  updatedAd          DateTime            @updatedAt
  dueDate            DateTime?
  campaign           Campaign            @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  timeline           CampaignTimeline    @relation(fields: [campaignTimelineId], references: [id], onDelete: Cascade)
  campaignTaskAdmin  CampaignTaskAdmin[]
}

model CampaignTaskAdmin {
  id             String       @id @default(cuid())
  userId         String
  campaignTaskId String
  campaignTask   CampaignTask @relation(fields: [campaignTaskId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, campaignTaskId])
}

model Notification {
  id               String             @id @unique @default(cuid())
  title            String?
  message          String
  createdAt        DateTime           @default(now())
  entity           Entity?
  campaignId       String?
  pitchId          String?
  submissionId     String?
  creatorId        String?
  userId           String?
  threadId         String?
  invoiceId        String?
  campaign         Campaign?          @relation(fields: [campaignId], references: [id])
  pitch            Pitch?             @relation(fields: [pitchId], references: [id])
  submission       Submission?        @relation(fields: [submissionId], references: [id])
  User             User?              @relation(fields: [userId], references: [id])
  userNotification UserNotification[]
}

model UserNotification {
  id             String       @id @unique @default(cuid())
  userId         String
  notificationId String
  read           Boolean      @default(false)
  archive        Boolean      @default(false)
  readAt         DateTime?
  notification   Notification @relation(fields: [notificationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([userId, notificationId])
}

model Submission {
  id                   String                 @id @default(cuid())
  content              String?
  caption              String?
  videos               String[]
  campaignId           String
  status               SubmissionStatus       @default(IN_PROGRESS)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  submissionDate       DateTime?
  dueDate              DateTime?
  completedAt          DateTime?
  nextsubmissionDate   DateTime?
  approvedByAdminId    String?
  userId               String
  submissionTypeId     String
  isReview             Boolean                @default(false)
  startDate            DateTime?
  endDate              DateTime?
  feedback             Feedback[]
  Notification         Notification[]
  campaign             Campaign               @relation(fields: [campaignId], references: [id])
  submissionType       SubmissionType         @relation(fields: [submissionTypeId], references: [id])
  user                 User                   @relation(fields: [userId], references: [id])
  admin                Admin?                 @relation(fields: [approvedByAdminId], references: [userId], name: "ApprovedByAdmin")
  dependencies         SubmissionDependency[] @relation("Dependencies")
  dependentOn          SubmissionDependency[] @relation("DependentOn")
  task                 Task[]
  video                Video[]
  rawFootages          RawFootage[]
  photos               Photo[]
  publicFeedback       PublicFeedback[]
  photosDriveLink      String?
  rawFootagesDriveLink String?

  @@unique([userId, campaignId, submissionTypeId])
}

model Video {
  id           String         @id @default(cuid())
  url          String?
  status       FeedbackStatus @default(PENDING)
  campaignId   String?
  campaign     Campaign?      @relation(fields: [campaignId], references: [id])
  userId       String?
  user         User?          @relation(fields: [userId], references: [id])
  submissionId String?
  submission   Submission?    @relation(fields: [submissionId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?      @updatedAt
  
  // Individual feedback fields
  feedback     String?        // Individual feedback message
  reasons      String[]       // Reasons for changes (if any)
  adminId      String?        // Admin who provided feedback
  admin        User?          @relation("VideoFeedback", fields: [adminId], references: [id])
  feedbackAt   DateTime?      // When feedback was provided
}

model RawFootage {
  id         String         @id @default(cuid())
  url        String
  campaignId String?
  campaign   Campaign?      @relation(fields: [campaignId], references: [id])
  userId     String?
  user       User?          @relation(fields: [userId], references: [id])
  status     FeedbackStatus @default(PENDING)

  submissionId String?
  submission   Submission? @relation(fields: [submissionId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt
  
  // Individual feedback fields
  feedback     String?     // Individual feedback message
  reasons      String[]    // Reasons for changes (if any)
  adminId      String?     // Admin who provided feedback
  admin        User?       @relation("RawFootageFeedback", fields: [adminId], references: [id])
  feedbackAt   DateTime?   // When feedback was provided
}

model Photo {
  id         String         @id @default(cuid())
  url        String
  campaignId String?
  campaign   Campaign?      @relation(fields: [campaignId], references: [id])
  userId     String?
  user       User?          @relation(fields: [userId], references: [id])
  status     FeedbackStatus @default(PENDING)

  submissionId String?
  submission   Submission? @relation(fields: [submissionId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt
  
  // Individual feedback fields
  feedback     String?     // Individual feedback message
  reasons      String[]    // Reasons for changes (if any)
  adminId      String?     // Admin who provided feedback
  admin        User?       @relation("PhotoFeedback", fields: [adminId], references: [id])
  feedbackAt   DateTime?   // When feedback was provided
}

// model DeliverableFeedback {
//   id String @id @unique @default(cuid())
// }

enum VideoStatus {
  Uploaded
  Processing
  Published
  Rejected
}

enum FeedbackStatus {
  PENDING
  APPROVED
  REJECTED
  REVISION_REQUESTED
}

// model DeliverableFeedback {
//   id String @id @unique @default(cuid())
// }

// enum VideoStatus {
//   Uploaded
//   Processing
//   Published
//   Rejected
// }

// enum FeedbackStatus {
//   PENDING
//   APPROVED
//   REJECTED
//   REVISION_REQUESTED
// }

model SubmissionDependency {
  id                    String      @id @default(cuid())
  submissionId          String?
  dependentSubmissionId String?
  dependentSubmission   Submission? @relation("Dependencies", fields: [dependentSubmissionId], references: [id], onDelete: Cascade)
  submission            Submission? @relation("DependentOn", fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([submissionId, dependentSubmissionId])
}

model CampaignSubmissionRequirement {
  id               String         @id @default(cuid())
  order            Int
  campaignId       String
  submissionTypeId String
  startDate        DateTime
  endDate          DateTime
  campaign         Campaign       @relation(fields: [campaignId], references: [id])
  submissionType   SubmissionType @relation(fields: [submissionTypeId], references: [id])

  @@unique([campaignId, submissionTypeId])
}

model SubmissionType {
  id               String                          @id @default(cuid())
  type             SubmissionEnum                  @unique
  description      String?
  requirements     CampaignSubmissionRequirement[]
  campaignTimeline CampaignTimeline[]
  submissions      Submission[]
}

model Feedback {
  id                 String        @id @unique @default(cuid())
  content            String?
  rawFootageContent  String?
  photoContent       String?
  type               FeedbackType?
  reasons            String[]
  videosToUpdate     String[]
  rawFootageToUpdate String[]
  photosToUpdate     String[]
  submissionId       String
  adminId            String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  admin              User          @relation(fields: [adminId], references: [id])
  submission         Submission    @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model Invoice {
  id            String        @id @unique @default(cuid())
  invoiceNumber String        @unique
  amount        Float
  status        InvoiceStatus @default(draft)
  task          Json?
  bankAcc       Json?
  invoiceFrom   Json?
  invoiceTo     Json?
  deliverables  Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  dueDate       DateTime
  creatorId     String
  campaignId    String
  adminId       String?
  user          User?         @relation("CreatedBy", fields: [adminId], references: [id])
  campaign      Campaign      @relation(fields: [campaignId], references: [id])
  creator       Creator       @relation(fields: [creatorId], references: [userId])
}

model Logistic {
  id             String         @id @unique @default(cuid())
  trackingNumber String
  itemName       String
  courier        String
  status         LogisticStatus @default(Product_is_being_packaged)
  updateAt       DateTime       @updatedAt
  createdAt      DateTime       @default(now())
  userId         String
  campaignId     String
  campaign       Campaign       @relation(fields: [campaignId], references: [id])
  user           User           @relation(fields: [userId], references: [id])
}

model PaymentForm {
  id                String             @id @unique @default(cuid())
  userId            String             @unique
  icNumber          String?
  bankName          String?
  bankAccountName   String?
  bankAccountNumber String?
  countryOfBank     String?
  bodyMeasurement   String?
  allergies         String[]
  status            PaymentFormStatus? @default(approved)
  reason            String?
  user              User               @relation(fields: [userId], references: [id])
}

model Board {
  id        String    @id @unique @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  columns   Columns[]
}

model Columns {
  id        String   @id @unique @default(cuid())
  name      String
  position  Int      @default(autoincrement())
  boardId   String
  createdAt DateTime @default(now())
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  task      Task[]
}

model Task {
  id           String         @id @unique @default(cuid())
  name         String
  description  String?
  status       String?
  position     Int
  priority     String?
  createdAt    DateTime       @default(now())
  dueDate      DateTime?
  labels       String[]
  columnId     String
  submissionId String?
  column       Columns        @relation(fields: [columnId], references: [id], onDelete: Cascade)
  submission   Submission?    @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  assignees    TaskAssignee[]
}

model TaskAssignee {
  id         String   @id @unique @default(cuid())
  assignedAt DateTime @default(now())
  taskId     String
  userId     String
  task       Task     @relation(fields: [taskId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model CreatorAgreement {
  id                String    @id @unique @default(cuid())
  agreementUrl      String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  isSent            Boolean   @default(false)
  amount            String?
  currency          String?
  userId            String
  campaignId        String
  completedAt       DateTime?
  approvedByAdminId String?
  version           Int?      @default(1)
  campaign          Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  admin             Admin?    @relation(fields: [approvedByAdminId], references: [userId], name: "CompletedByAdmin")

  @@unique([userId, campaignId])
}

model Crawler {
  id                 String   @id @unique @default(cuid())
  followers          Int
  engagement_rate    Int
  avg_likes_per_post Int
  top_contents       Json[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model AgreementTemplate {
  id            String     @id @unique @default(cuid())
  url           String?
  adminName     String?
  adminICNumber String?
  signURL       String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  userId        String?
  user          User?      @relation(fields: [userId], references: [id])
  isDefault     Boolean?   @default(false)
  campaign      Campaign[]
}

model Bugs {
  id               String   @id @unique @default(cuid())
  stepsToReproduce String
  attachment       String?
  campaignName     String?
  createdAt        DateTime @default(now())
  userId           String?
  user             User?    @relation(references: [id], fields: [userId])
}

model Subscription {
  id              String             @id @unique @default(cuid())
  subscriptionId  String?            @unique
  companyId       String?
  packageId       String?
  customPackageId String?
  currency        String?
  company         Company?           @relation(references: [id], fields: [companyId])
  creditsUsed     Int
  totalCredits    Int?
  packagePrice    Float?
  status          SubscriptionStatus @default(ACTIVE)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  package         Package?           @relation(fields: [packageId], references: [id])
  customPackage   CustomPackage?     @relation(fields: [customPackageId], references: [id])
  expiredAt       DateTime
  campaign        Campaign[]
}

model CustomPackage {
  id String @id @unique @default(cuid())

  customName           String
  customCredits        Int
  customValidityPeriod Int
  customPrice          Float
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  subscriptions        Subscription[]
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

model Package {
  id             String         @id @unique @default(cuid())
  name           String?
  credits        Int
  validityPeriod Int
  subscriptions  Subscription[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  prices         Price[]
}

model Price {
  id        Int      @id @default(autoincrement())
  packageId String
  package   Package  @relation(fields: [packageId], references: [id])
  currency  String
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([packageId, currency]) // Ensure each package has only one price per currency
}

enum PackageType {
  Trail
  Basic
  Essential
  Pro
  Custom
}

enum Currencies {
  MYR
  SGD
}

model PublicAccess {
  id         Int      @id @default(autoincrement())
  campaignId String
  password   String
  expiryDate DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  campaign Campaign @relation(fields: [campaignId], references: [id])
}

model PublicFeedback {
  id           String        @id @unique @default(cuid())
  content      String?
  type         FeedbackType?
  reasons      String[] // Optional field for reasons (if required)
  submissionId String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  submission   Submission    @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

enum LogisticStatus {
  Product_is_being_packaged
  Proudct_is_at_delivery_warehouse_in_transit
  Product_is_out_for_delivery
  Product_has_been_received
}

enum Designation {
  Finance
  CSM
  BD
  Growth
  Client
}

enum Modules {
  creator
  campaign
  brand
  metric
  invoice
}

enum Resources {
  creator
  brand
  campaign
}

enum Mode {
  god
  advanced
  normal
}

enum Status {
  active
  pending
  banned
  rejected
  blacklisted
  suspended
  spam
}

enum InvoiceStatus {
  pending
  paid
  overdue
  draft
  pending_approval
  pending_payment
  approved
  rejected
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
  SCHEDULED
}

enum RoleEnum {
  admin
  creator
  client
  brand
  superadmin
  finance
}

enum Stage {
  publish
  draft
}

enum Employment {
  fulltime
  freelance
  part_time
  student
  in_between
  unemployed
  others
}

enum CampaignTimelineStatus {
  close
  active
}

enum TimelineStatus {
  OPEN
  CLOSED
}

enum PitchType {
  video
  text
}

enum PitchStatus {
  pending
  approved
  rejected
  filtered
  undecided
  draft
}

enum DraftStatus {
  Pending
  Submitted
  Request_For_Edit
  Reviewed
  Approved
}

enum TaskStatus {
  NOT_STARTED
  TO_DO
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum SubmissionStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  PENDING_REVIEW
  APPROVED
  REJECTED
  ON_HOLD
  OVERDUE
  CHANGES_REQUIRED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Entity {
  Campaign
  User
  Pitch
  Shortlist
  Timeline
  Feedback
  Draft
  Post
  Logistic
  Invoice
  Metrcis
  Agreement
  Chat
  Live
  Status
  PaymentForm
}

enum SubmissionEnum {
  AGREEMENT_FORM
  FIRST_DRAFT
  FINAL_DRAFT
  POSTING
  OTHER
}

enum FeedbackType {
  COMMENT
  REASON
  REQUEST
}

enum pakcageStatus {
  active
  inactive
  expired
}

enum PaymentFormStatus {
  rejected
  approved
}
