import { Event, PrismaClient, InvoiceStatus, Invoice, Prisma } from '@prisma/client';
import dayjs from 'dayjs';
import { accessGoogleSheetAPI } from './google_sheets/sheets';

import utc from 'dayjs/plugin/utc';
import timezone from 'dayjs/plugin/timezone';
import { saveNotification } from '@controllers/notificationController';
import { sendEmail } from '@controllers/authController';
import { rejectInvoiceEmail } from '@configs/nodemailer.config';
import { logChange } from '@services/campaignServices';
import { missingInvoices } from '@constants/missing-invoices';
import { getCreatorInvoiceLists } from './submissionService';

dayjs.extend(utc);
dayjs.extend(timezone);

const prisma = new PrismaClient();

// type Invoice = {
//   // invoice number is generated by the system
//   invoiceNumber: string;
//   // sent by requester
//   createDate: Date;
//   // sent by requester
//   dueDate: Date;
//   // sent by requester
//   status: InvoiceStatus;
//   // created in backend
//   invoiceFrom: any;
//   // static value which is cult creative
//   invoiceTo: object;
//   // the service item which is static
//   items: object[];
//   // get it from the aggremant form data
//   totalAmount: number;
//   // get all of it from creator data
//   bankInfo: object;
//   // get it from the session
//   createdBy: string;
//   // sent by requester
//   campaignId: string;
// };

export async function generateUniqueInvoiceNumber() {
  // eslint-disable-next-line no-constant-condition
  while (true) {
    const randomNumber = Math.floor(1000 + Math.random() * 9000); // Ensures 4 digits
    const invoiceNumber = `INV-${randomNumber}`;

    // Check if the invoice number already exists
    const existingInvoice = await prisma.invoice.findUnique({
      where: { invoiceNumber },
    });

    if (!existingInvoice) {
      // Return the unique invoice number
      return invoiceNumber;
    }

    // If the number exists, retry
  }
}

export const createInvoiceService = async (
  data: any,
  userId: any,
  amount: any,
  invoiceItems?: { type: string; count: number }[],
  tx?: PrismaClient,
  adminId?: string,
) => {
  const invoiceNumber = await generateUniqueInvoiceNumber();

  const invoiceTo = {
    id: '1',
    name: 'Cult Creative',
    fullAddress:
      '5-3A, Block A, Jaya One, No.72A, Jalan Universiti, 46200 Petaling Jaya, Selangor',
    phoneNumber: '(+60)12-849 6499',
    company: 'Cult Creative',
    addressType: 'Hq',
    email: 'support@cultcreative.asia',
    primary: true,
  };

  // get item from aggremant form
  const item = {
    title: 'Posting on social media',
    description: 'Posting on social media',
    service: 'Posting on social media',
    quantity: 1,
    price: amount,
    total: amount,
  };

  const invoiceFrom = {
    id: data.user.id,
    name: data.user.paymentForm.bankAccountName || data.user.name,
    phoneNumber: data.user.phoneNumber,
    email: data.user.email,
    fullAddress: data.user.creator.fullAddress,
    company: data.user.creator.employment,
    addressType: 'Home',
    primary: false,
  };

  const bankInfo = {
    bankName: data.user.paymentForm.bankName,
    accountName: data.user.paymentForm.bankAccountName,
    payTo: data.user.name,
    accountNumber: data.user.paymentForm.bankAccountNumber,
    accountEmail: data.user.email,
  };

  try {
    const { invoice } = await (tx ?? prisma).campaign.update({
      where: {
        id: data.campaignId,
      },
      data: {
        invoice: {
          create: {
            invoiceNumber: invoiceNumber,
            createdAt: data.updatedAt,
            dueDate: new Date(dayjs(data.updatedAt).add(28, 'day').format()),
            status: 'draft' as InvoiceStatus,
            invoiceFrom: invoiceFrom,
            invoiceTo,
            task: item,
            amount: parseFloat(amount) || 0,
            bankAcc: bankInfo,
            user: {
              connect: {
                id: userId,
              },
            },
            creator: {
              connect: {
                userId: data.user.id,
              },
            },
            ...(invoiceItems?.length && {
              deliverables: invoiceItems,
            }),
          },
        },
      },
      include: {
        invoice: true,
      },
    });

    const createdInvoice = invoice.find((item) => item.creatorId === data.user.id);

    // Log invoice generation in campaign logs for Invoice Actions tab
    if (createdInvoice && data.campaignId && adminId) {
      const creatorName = data.user?.name || 'Unknown Creator';
      const logMessage = `Invoice ${invoiceNumber} for ${creatorName} was generated`;

      // Create the log entry directly without requiring a full request object
      await (tx ?? prisma).campaignLog.create({
        data: {
          message: logMessage,
          campaignId: data.campaignId,
          adminId: adminId,
        },
      });
    }

    return createdInvoice;
  } catch (error) {
    throw new Error(error);
  }
};

export const sendToSpreadSheet = async (
  data: {
    createdAt: string;
    name: string;
    icNumber: string;
    bankName: string;
    campaignName: string;
    bankAccountNumber: string;
    amount: number;
  },
  spreadSheetId: string,
  sheetByTitle: string,
) => {
  try {
    const sheet = await accessGoogleSheetAPI(spreadSheetId);

    if (!sheet) {
      throw new Error('Sheet not found.');
    }

    const currentSheet = sheet.sheetsByTitle[sheetByTitle];

    if (!currentSheet) {
      throw new Error('Sheet not found.');
    }

    const updatedRow = await currentSheet.addRow({
      'Date Created': dayjs(data.createdAt).tz('Asia/Kuala_Lumpur').format('LLL'),
      'Creator Name': data.name || '',
      'IC Number': data.icNumber || '',
      'Campaign Name': data.campaignName || '',
      'Bank Name': data.bankName || '',
      'Bank Account Number': data.bankAccountNumber || '',
      Amount: new Intl.NumberFormat('en-MY', { minimumFractionDigits: 2 }).format(data.amount),
    });

    console.log(updatedRow);

    return updatedRow;
  } catch (error) {
    throw new Error(error);
  }
};

export const rejectInvoice = async ({
  userId,
  tx,
  reason,
  campaignName,
}: {
  userId?: string;
  tx: Prisma.TransactionClient; // Better typing
  reason: string;
  campaignName: string;
}): Promise<void> => {
  if (!userId) throw new Error('User Id not found');

  try {
    const payment = await tx.paymentForm.update({
      where: { userId: userId },
      data: {
        status: 'rejected',
        reason: reason || '',
      },
      select: {
        reason: true,
        user: { select: { email: true } },
      },
    });

    await saveNotification({
      userId,
      message: `Your invoice for ${campaignName} has been rejected due to ${reason}. Please amend Payment Details to get paid!`,
      entity: 'PaymentForm',
      title: '⚠️ Invoice Rejected',
    });

    await rejectInvoiceEmail(payment?.user?.email, campaignName, payment?.reason || '');
  } catch (error) {
    throw error instanceof Error ? error : new Error(String(error));
  }
};

export const updateInvoices = async ({ bankAcc, userId }: { bankAcc: any; userId: string }): Promise<void> => {
  if (!userId) throw new Error('Creator ID not found');

  try {
    const invoices = await prisma.invoice.findMany({
      where: {
        creatorId: userId,
        status: {
          in: ['rejected', 'draft'],
        },
      },
    });

    await Promise.all(
      invoices.map(async (invoice) => {
        await prisma.invoice.update({
          where: {
            id: invoice.id,
          },
          data: {
            bankAcc: bankAcc,
            status: 'draft',
          },
        });
      }),
    );

    console.log('DONE');
  } catch (error) {
    if (error instanceof Error) {
      throw error;
    }
    throw new Error(String(error));
  }
};

// export async function findMissingInvoices() {
//   try {
//     const missings = [];

//     const creators = await prisma.shortListedCreator.findMany({
//       where: {
//         isCampaignDone: true,
//       },
//       select: {
//         user: {
//           select: {
//             id: true,
//             name: true,
//             creator: true,
//           },
//         },
//         campaignId: true,
//         campaign: {
//           select: {
//             name: true,
//           },
//         },
//       },
//     });

//     for (const item of creators) {
//       const invoice = await prisma.invoice.findFirst({
//         where: {
//           AND: [
//             {
//               campaignId: item.campaignId,
//             },
//             {
//               OR: [
//                 {
//                   user: {
//                     id: item?.user?.id,
//                   },
//                 },
//                 {
//                   creatorId: item.user?.id,
//                 },
//               ],
//             },
//           ],
//         },
//       });

//       const data = { userId: item.user?.id, campaignId: item.campaignId };

//       if (!invoice) {
//         missings.push(data);
//         // console.log(
//         //   `${item?.user?.name} (${item.user?.id})'s invoice is missing for campaign ${item.campaign.name} (${item.campaignId})`,
//         // );
//       }
//     }

//     console.log(missings);

//     return;

//     // console.log(creators);
//   } catch (error) {
//     console.log(error);
//     throw new Error(error);
//   }
// }

// export async function generateInvoices() {
//   const invoiceTo = {
//     id: '1',
//     name: 'Cult Creative',
//     fullAddress: '5-3A, Block A, Jaya One, No.72A, Jalan Universiti,46200 Petaling Jaya, Selangor',
//     phoneNumber: '+60 11-5415 5751',
//     company: 'Cult Creative',
//     addressType: 'Hq',
//     email: 'support@cultcreative.asia',
//     primary: true,
//   };

//   try {
//     for (const item of missingInvoices) {
//       const invoiceNumber = await generateUniqueInvoiceNumber();

//       const agreement = await prisma.creatorAgreement.findFirst({
//         where: {
//           userId: item.userId,
//           campaignId: item.campaignId,
//         },
//         include: {
//           user: {
//             include: {
//               creator: true,
//               paymentForm: true,
//             },
//           },
//         },
//       });

//       const items = {
//         title: 'Posting on social media',
//         description: 'Posting on social media',
//         service: 'Posting on social media',
//         quantity: 1,
//         price: agreement?.amount,
//         total: agreement?.amount,
//       };

//       const invoiceFrom = {
//         id: agreement?.user.id,
//         name: agreement?.user.name,
//         phoneNumber: agreement?.user.phoneNumber,
//         email: agreement?.user.email,
//         fullAddress: agreement?.user.creator?.address,
//         company: agreement?.user.creator?.employment,
//         addressType: 'Home',
//         primary: false,
//       };

//       const bankInfo = {
//         bankName: agreement?.user.paymentForm?.bankName,
//         accountName: agreement?.user.paymentForm?.bankAccountName,
//         payTo: agreement?.user.name,
//         accountNumber: agreement?.user.paymentForm?.bankAccountNumber,
//         accountEmail: agreement?.user.email,
//       };

//       const firstDraftType = await prisma.submissionType.findFirst({
//         where: {
//           type: 'FIRST_DRAFT',
//         },
//       });

//       const finalDraftType = await prisma.submissionType.findFirst({
//         where: {
//           type: 'FINAL_DRAFT',
//         },
//       });

//       const firstDraftSubmission = await prisma.submission.findFirst({
//         where: {
//           userId: agreement?.userId,
//           campaignId: agreement?.campaignId,
//           submissionTypeId: firstDraftType?.id,
//         },
//       });

//       const invoiceItems = await getCreatorInvoiceLists(firstDraftSubmission?.id!);

//       await prisma.invoice.create({
//         data: {
//           invoiceNumber: invoiceNumber,
//           createdAt: new Date(),
//           dueDate: new Date(dayjs().add(28, 'day').format()),
//           status: 'draft' as InvoiceStatus,
//           invoiceFrom: invoiceFrom,
//           invoiceTo,
//           task: items,
//           amount: parseFloat(agreement?.amount!) || 0,
//           bankAcc: bankInfo,
//           user: {
//             connect: {
//               id: agreement?.userId,
//             },
//           },
//           creator: {
//             connect: {
//               userId: agreement?.userId,
//             },
//           },
//           ...(invoiceItems?.length && {
//             deliverables: invoiceItems,
//           }),
//           campaign: {
//             connect: { id: item.campaignId },
//           },
//         },
//       });
//     }

//     return 'success';
//   } catch (error) {
//     console.log(error);
//     throw new Error(error);
//   }
// }
